import { GraphConfig } from '../../config';
export declare class GraphData {
    inputPointPositions: Float32Array | undefined;
    inputPointColors: Float32Array | undefined;
    inputPointSizes: Float32Array | undefined;
    inputLinkColors: Float32Array | undefined;
    inputLinkWidths: Float32Array | undefined;
    inputLinkStrength: Float32Array | undefined;
    inputPointClusters: (number | undefined)[] | undefined;
    inputClusterPositions: (number | undefined)[] | undefined;
    inputClusterStrength: Float32Array | undefined;
    pointPositions: Float32Array | undefined;
    pointColors: Float32Array | undefined;
    pointSizes: Float32Array | undefined;
    inputLinks: Float32Array | undefined;
    links: Float32Array | undefined;
    linkColors: Float32Array | undefined;
    linkWidths: Float32Array | undefined;
    linkArrowsBoolean: boolean[] | undefined;
    linkArrows: number[] | undefined;
    linkStrength: Float32Array | undefined;
    pointClusters: (number | undefined)[] | undefined;
    clusterPositions: (number | undefined)[] | undefined;
    clusterStrength: Float32Array | undefined;
    /**
     * Each inner array of `sourceIndexToTargetIndices` and `targetIndexToSourceIndices` contains pairs where:
     *   - The first value is the target/source index in the point array.
     *   - The second value is the link index in the array of links.
    */
    sourceIndexToTargetIndices: ([number, number][] | undefined)[] | undefined;
    targetIndexToSourceIndices: ([number, number][] | undefined)[] | undefined;
    degree: number[] | undefined;
    inDegree: number[] | undefined;
    outDegree: number[] | undefined;
    private _config;
    constructor(config: GraphConfig);
    get pointsNumber(): number | undefined;
    get linksNumber(): number | undefined;
    updatePoints(): void;
    /**
     * Updates the point colors based on the input data or default config value.
     */
    updatePointColor(): void;
    /**
     * Updates the point sizes based on the input data or default config value.
     */
    updatePointSize(): void;
    updateLinks(): void;
    /**
     * Updates the link colors based on the input data or default config value.
     */
    updateLinkColor(): void;
    /**
     * Updates the link width based on the input data or default config value.
     */
    updateLinkWidth(): void;
    /**
     * Updates the link arrows based on the input data or default config value.
     */
    updateArrows(): void;
    updateLinkStrength(): void;
    updateClusters(): void;
    update(): void;
    getAdjacentIndices(index: number): number[] | undefined;
    private _createAdjacencyLists;
    private _calculateDegrees;
}
